// <auto-generated />
using System;
using HobbyHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HobbyHubSystem.Data.Migrations
{
    [DbContext(typeof(HobbyHubDbContext))]
    [Migration("20230814122951_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Account.HobbyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5e2081c-5052-4162-b0d7-1920163d6b9d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "871c35f1-856a-480e-9f48-fad5e6839c2d",
                            Email = "mihaela@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Mihaela",
                            Gender = "female",
                            ImageUrl = "https://www.taylorherring.com/wp-content/uploads/2015/03/Archetypal-Female-Face-of-Beauty-embargoed-to-00.01hrs-30.03.15.jpg",
                            LastName = "Mihael4ov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIHAELA@ABV.BG",
                            NormalizedUserName = "MIHAELA MIHAEL4OV",
                            PasswordHash = "AQAAAAEAACcQAAAAEBCpr++Rrwxg7Eu97ij+pi9s+58+v3yRfvtSxvywL+UR/BLRO+qOT/y+HmBl6B29Ng==",
                            PhoneNumberConfirmed = false,
                            RegisteredOn = new DateTime(2023, 8, 14, 12, 29, 50, 245, DateTimeKind.Utc).AddTicks(8120),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Mihaela Mihael4ov"
                        },
                        new
                        {
                            Id = new Guid("2a29f172-6978-420f-a929-ca5678254935"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11af791e-0233-4e00-8398-181007143a42",
                            Email = "sami@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Sami",
                            Gender = "male",
                            ImageUrl = "https://www.taylorherring.com/wp-content/uploads/2015/03/Archetypal-Male-Face-of-Beauty-embargoed-to-00.01hrs-30.03.15.jpg",
                            LastName = "Sam4ov",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMI@ABV.BG",
                            NormalizedUserName = "SAMI SAM4OV",
                            PasswordHash = "AQAAAAEAACcQAAAAEFPfCPfynrcKhEwH+WsUja862MaIKsos9vDyzpKA+Ed9jwUaqjQRTr8gVg5JdGAd2w==",
                            PhoneNumberConfirmed = false,
                            RegisteredOn = new DateTime(2023, 8, 14, 12, 29, 50, 248, DateTimeKind.Utc).AddTicks(1824),
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Sami Sam4ov"
                        });
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("this is the author of the question");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("this is the body of the answer");

                    b.Property<int>("DiscussionTopicId")
                        .HasColumnType("int")
                        .HasComment("the topic where the question belongs");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasComment("this is the question");

                    b.Property<DateTime>("RepliedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("the date when the answer is given");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DiscussionTopicId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("author of the article");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("content of the article");

                    b.Property<int>("HubId")
                        .HasColumnType("int")
                        .HasComment("hub where the article belongs");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("when it is false - the article is deleted");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("before release the article should be approved by admin or moderator");

                    b.Property<DateTime>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("the date on which the article is published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("title of the article");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("HubId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("picture of the category");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("when it is false - the category is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("name of the category");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://dawnmagazines.com/wp-content/uploads/2020/10/Water-Sports.jpg",
                            IsActive = true,
                            Name = "Water"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/e/e1/Pilates_Moscow.jpg",
                            IsActive = true,
                            Name = "Spiritual and Mental"
                        });
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Discussion.DiscussionTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier of the discussion topic");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("author of the topic");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasComment("the date when the topic is created");

                    b.Property<int?>("HubId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("title of the discussion topic");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("HubId");

                    b.ToTable("DiscussionTopics");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("user who enters the event in the system");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("datetime2")
                        .HasComment("date on which the event will happen");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("details of the event");

                    b.Property<int>("HubId")
                        .HasColumnType("int")
                        .HasComment("hub where the event belongs");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("when it is false - the event is deleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("location where the event will happen");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("name of the event");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HubId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("category to which the hobby belongs");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("person who descibed the hobby in the system");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("text with detailed description about the hobby");

                    b.Property<int>("HubId")
                        .HasColumnType("int")
                        .HasComment("this is the group which belongs to the hobby");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("picture of the hobby");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("when it is false - the hobby is deleted");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("before release the hobby should be approved by admin or moderator");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("name of the hobby");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HubId")
                        .IsUnique();

                    b.ToTable("Hobbies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatorId = new Guid("c5e2081c-5052-4162-b0d7-1920163d6b9d"),
                            Description = "Water skiing (also waterskiing or water-skiing) is a surface water sport in which an individual is pulled behind a boat or a cable ski installation over a body of water, skimming the surface on two skis or one ski.",
                            HubId = 1,
                            ImageUrl = "https://worldwaterskiers.com/wp-content/uploads/2019/06/im-waterskiing.jpg",
                            IsActive = true,
                            IsApproved = true,
                            Name = "Water skiing"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatorId = new Guid("2a29f172-6978-420f-a929-ca5678254935"),
                            Description = "Reiki is a form of energy healing. Its roots can be traced back to the 1920’s in Japan. Pronounced “ray-kee”, Reiki can be roughly translated to mean “Universal Life Force” where Rei means Universal and Ki is Life force. ",
                            HubId = 2,
                            ImageUrl = "https://www.tododisca.com/wp-content/uploads/2020/08/sesion-de-reiki-2-1.jpg",
                            IsActive = true,
                            IsApproved = true,
                            Name = "Reiki"
                        });
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.HobbyUserEvent", b =>
                {
                    b.Property<Guid>("HobbyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("HobbyUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("HobbyUserEvents");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.HobbyUserHub", b =>
                {
                    b.Property<Guid>("HobbyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HubId")
                        .HasColumnType("int");

                    b.HasKey("HobbyUserId", "HubId");

                    b.HasIndex("HubId");

                    b.ToTable("HobbyUserHubs");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Hub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("short description of the hub");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("the creator of the group");

                    b.Property<int>("HobbyId")
                        .HasColumnType("int")
                        .HasComment("hobby to which this group belongs");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("name of the hub");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Hubs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "This hub belongs to hobby Water skiing and all articles, events and discussions are connected with Water skiing",
                            CreatorId = new Guid("c5e2081c-5052-4162-b0d7-1920163d6b9d"),
                            HobbyId = 1,
                            Name = "Water skiing"
                        },
                        new
                        {
                            Id = 2,
                            About = "This hub belongs to hobby Reiki and all articles, events and discussions are connected with Reiki",
                            CreatorId = new Guid("2a29f172-6978-420f-a929-ca5678254935"),
                            HobbyId = 2,
                            Name = "Reiki"
                        });
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("unique identifier of the question");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("the creator of the question");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("the body of the question");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("the date when the question is asked");

                    b.Property<int>("DiscussionTopicId")
                        .HasColumnType("int")
                        .HasComment("the discussion to which the question belongs");

                    b.Property<int>("Views")
                        .HasColumnType("int")
                        .HasComment("the count of users who saw the question");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DiscussionTopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Answer", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "Author")
                        .WithMany("Answers")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Discussion.DiscussionTopic", "DiscussionTopic")
                        .WithMany("Answers")
                        .HasForeignKey("DiscussionTopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("DiscussionTopic");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Article", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Hub", "Hub")
                        .WithMany("Articles")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Discussion.DiscussionTopic", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Hub", null)
                        .WithMany("DiscussionTopics")
                        .HasForeignKey("HubId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Event", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Hub", "Hub")
                        .WithMany("Events")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Hobby", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Category", "Category")
                        .WithMany("Hobbies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Hub", "Hub")
                        .WithOne("Hobby")
                        .HasForeignKey("HobbyBubSystem.Data.Models.Hobby", "HubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.HobbyUserEvent", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Event", "Event")
                        .WithMany("HobbyUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "HobbyUser")
                        .WithMany("HobbyUserEvents")
                        .HasForeignKey("HobbyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("HobbyUser");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.HobbyUserHub", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "HobbyUser")
                        .WithMany("HobbyUsersHubs")
                        .HasForeignKey("HobbyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Hub", "Hub")
                        .WithMany("Members")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HobbyUser");

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Hub", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Question", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", "Author")
                        .WithMany("Questions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Discussion.DiscussionTopic", "DiscussionTopic")
                        .WithMany("Questions")
                        .HasForeignKey("DiscussionTopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("DiscussionTopic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HobbyBubSystem.Data.Models.Account.HobbyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Account.HobbyUser", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Events");

                    b.Navigation("HobbyUserEvents");

                    b.Navigation("HobbyUsersHubs");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Category", b =>
                {
                    b.Navigation("Hobbies");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Discussion.DiscussionTopic", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Event", b =>
                {
                    b.Navigation("HobbyUsers");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Hub", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("DiscussionTopics");

                    b.Navigation("Events");

                    b.Navigation("Hobby")
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("HobbyBubSystem.Data.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
